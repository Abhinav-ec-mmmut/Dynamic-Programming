1314. Matrix Block Sum
Medium

251

49

Add to List

Share
Given a m * n matrix mat and an integer K, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for i - K <= r <= i + K, j - K <= c <= j + K, and (r, c) is a valid position in the matrix.
 

Example 1:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], K = 1
Output: [[12,21,16],[27,45,33],[24,39,28]]
Example 2:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], K = 2
Output: [[45,45,45],[45,45,45],[45,45,45]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n, K <= 100
1 <= mat[i][j] <= 100

Success
Details 
Runtime: 16 ms, faster than 91.91% of C++ online submissions for Matrix Block Sum.
Memory Usage: 9.4 MB, less than 100.00% of C++ online submissions for Matrix Block Sum.

class Solution {
public:
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
        int m=mat.size();
        int n=mat[0].size();
       vector<vector<int>> dp(m+1,vector<int>(n+1,0));
       
        
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
            {
               dp[i+1][j+1]=dp[i][j+1]+dp[i+1][j]-dp[i][j]+mat[i][j];
            }
       vector<vector<int>> ans(m, vector<int>(n,0));
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
            {
              int is=max(0,i-k);
              int ie=min(i+k+1,m);
                int js=max(0,j-k);
                int je=min(j+k+1,n);
                ans[i][j]=dp[ie][je]-dp[ie][js]-dp[is][je]+dp[is][js];
            }
        return ans;
        
    }
};
